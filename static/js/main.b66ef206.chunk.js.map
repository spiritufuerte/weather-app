{"version":3,"sources":["api/GeocodeApi.js","components/SearchComponent.jsx","api/WeatherApi.js","components/Weather.jsx","App.js","index.js","components/Weather.module.css"],"names":["getCoordinatesByCity","city","Promise","resolve","reject","key","coordinates","localStorage","getItem","JSON","parse","Geocode","fromAddress","then","response","results","geometry","location","setItem","stringify","error","console","getCityByCoordinates","lat","lng","fromLatLng","address_components","short_name","setApiKey","SearchComponent","handleSearch","ref","useRef","handlerSubmit","e","a","preventDefault","current","value","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","className","onSubmit","type","placeholder","instance","axios","create","baseURL","getWeather","weather","values","currentSunrise","Date","currentSunset","get","params","lon","exclude","units","appid","res","currentData","data","todayWeather","daily","weatherIcon","icon","weatherDescription","description","currentClouds","clouds","sunrise","sunset","currentTemp","temp","tMin","min","tMax","max","Weather","useState","setCity","setWeather","result","date","getDate","getMonth","formatDate","src","classes","main","info","Fragment","alt","weather_wrapper","getHours","getMinutes","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b66ef206.chunk.js","sourcesContent":["import Geocode from \"react-geocode\";\r\n\r\nGeocode.setApiKey(\"AIzaSyCGzMDw4iq6loLNXllX9mIHyQdlP1kz-pg\");\r\n\r\nexport function getCoordinatesByCity(city) {\r\n  return new Promise((resolve, reject) => {\r\n    const key = `city/${city}`;\r\n    const coordinates = localStorage.getItem(key);\r\n    if (coordinates) {\r\n      resolve(JSON.parse(coordinates));\r\n      return;\r\n    }\r\n\r\n    Geocode.fromAddress(city).then(\r\n      response => {\r\n        const coordinates = response.results[0].geometry.location;\r\n        localStorage.setItem(key, JSON.stringify(coordinates));\r\n        resolve(coordinates);\r\n      },\r\n      error => {\r\n        console.error(error);\r\n        reject(error);\r\n      }\r\n    )\r\n  });\r\n}\r\n\r\nexport function getCityByCoordinates(lat, lng) {\r\n  return new Promise((resolve, reject) => {\r\n    const key = `coordinate/${lat},${lng}`;\r\n    const city = localStorage.getItem(key);\r\n    if (city) {\r\n      resolve(city);\r\n      return;\r\n    }\r\n\r\n    Geocode.fromLatLng(lat, lng).then(\r\n      response => {\r\n        const city = response.results[0].address_components[3].short_name;\r\n        localStorage.setItem(key, city);\r\n        resolve(city);\r\n      },\r\n      error => {\r\n        console.error(error);\r\n        reject(error);\r\n      }\r\n    )\r\n  });\r\n}","import React, {useRef, useEffect} from 'react';\r\nimport './SearchComponent.css';\r\nimport {getCoordinatesByCity, getCityByCoordinates} from \"../api/GeocodeApi\";\r\n\r\nconst SearchComponent = ({handleSearch}) => {\r\n  const ref = useRef(null);\r\n\r\n  const handlerSubmit = async (e) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    const city = ref.current.value;\r\n    const {lat, lng} = await getCoordinatesByCity(city);\r\n    handleSearch({city, lat, lng});\r\n  }\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        ref.current.value = await getCityByCoordinates(position.coords.latitude, position.coords.longitude);\r\n        await handlerSubmit(null);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handlerSubmit}>\r\n      <div className=\"input_wrapper\">\r\n        <input type=\"text\" placeholder=\"Search location\" ref={ref}/>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchComponent;","import axios from \"axios\";\r\n\r\nconst keyApi = '5c2e7db91be800dca337ae2f4990971f';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.openweathermap.org/data/2.5'\r\n});\r\n\r\nexport const getWeather = async ({lat, lng}) => {\r\n  const key = `weather/${lat},${lng}`;\r\n\r\n  const weather = localStorage.getItem(key);\r\n  if (weather) {\r\n    const values = JSON.parse(weather);\r\n    values.currentSunrise = new Date(values.currentSunrise);\r\n    values.currentSunset = new Date(values.currentSunset);\r\n    return values;\r\n  }\r\n\r\n  const res = await instance.get(`/onecall`, {\r\n    params: {\r\n      lat: lat,\r\n      lon: lng,\r\n      exclude: [\"hourly\", \"alerts\"],\r\n      units: \"metric\",\r\n      appid: keyApi\r\n    }\r\n  });\r\n  const currentData = res.data.current;\r\n  const todayWeather = res.data.daily[0];\r\n  const weatherIcon = currentData.weather[0].icon;\r\n  const weatherDescription = currentData.weather[0].description;\r\n\r\n  const values = {\r\n    currentClouds: currentData.clouds,\r\n    currentSunrise: new Date(currentData.sunrise * 1000),\r\n    currentSunset: new Date(currentData.sunset * 1000),\r\n    currentTemp: currentData.temp,\r\n    tMin: todayWeather.temp.min,\r\n    tMax: todayWeather.temp.max,\r\n    weatherDescription,\r\n    weatherIcon\r\n  };\r\n\r\n  localStorage.setItem(key, JSON.stringify(values));\r\n\r\n  return values;\r\n}","import React, {useState} from 'react';\r\nimport SearchComponent from \"./SearchComponent\";\r\nimport {getWeather} from \"../api/WeatherApi\";\r\nimport classes from './Weather.module.css';\r\n\r\nconst Weather = () => {\r\n  const [city, setCity] = useState(null);\r\n  const [weather, setWeather] = useState({\r\n    currentTemp: 0,\r\n    tMax: null,\r\n    tMin: null,\r\n    currentSunset: new Date(),\r\n    currentSunrise: new Date(),\r\n    currentClouds: 0,\r\n    weatherIcon: '',\r\n    weatherDescription: ''\r\n  });\r\n\r\n  const handleSearch = async ({city, lng, lat}) => {\r\n    const result = await getWeather({lng, lat});\r\n    setWeather(result);\r\n    setCity(city);\r\n  };\r\n\r\n  function formatDate(date) {\r\n    let monthNames = [\r\n      \"January\", \"February\", \"March\",\r\n      \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\",\r\n      \"November\", \"December\"\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n\r\n    return day + ' ' + monthNames[monthIndex];\r\n  }\r\n\r\n  let date = formatDate(new Date());\r\n  let src = `http://openweathermap.org/img/wn/${weather.weatherIcon}@2x.png`;\r\n\r\n  return (\r\n    <div className={classes.main}>\r\n      <SearchComponent handleSearch={handleSearch}/>\r\n      <div className={classes.info}>\r\n        {weather.tMax ?\r\n          <React.Fragment>\r\n            <div className={classes.location}>\r\n              <h1>{city}</h1>\r\n              <h2>{date}</h2>\r\n              <img src={src} alt=\"condition\"/>\r\n              <p>Weather condition: {weather.weatherDescription}</p>\r\n            </div>\r\n            <div className={classes.weather_wrapper}>\r\n              <p>Temperature now: {weather.currentTemp} °C</p>\r\n              <p>Min temperature today: {weather.tMin} °C</p>\r\n              <p>Max temperature today: {weather.tMax} °C</p>\r\n              <p>Sunset: {weather.currentSunset.getHours()}:{weather.currentSunset.getMinutes()}</p>\r\n              <p>Sunrise: {weather.currentSunrise.getHours()}:{weather.currentSunrise.getMinutes()}</p>\r\n              <p>Clouds: {weather.currentClouds}%</p>\r\n            </div>\r\n          </React.Fragment>\r\n          : <h1> Wait</h1>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './App.css';\r\nimport Weather from \"./components/Weather\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Weather/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Weather_main__30e43\",\"info\":\"Weather_info__23i87\",\"location\":\"Weather_location__Wic-L\",\"weather_wrapper\":\"Weather_weather_wrapper__xFaSS\"};"],"sourceRoot":""}